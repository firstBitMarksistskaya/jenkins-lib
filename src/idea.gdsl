//The global script scope
def ctx = context(scope: scriptScope(null))
//What things can be on the script scope
contributor(ctx) {
    method(name: 'pipeline', type: 'Object', params: [body: Closure])
    method(name: 'build', type: 'Object', params: [job: String], doc: 'Build a job')
    method(name: 'build', type: 'Object', namedParams: [parameter(name: 'job', type: String), parameter(name: 'parameters', type: Map), parameter(name: 'propagate', type: boolean), parameter(name: 'quietPeriod', type: 'java.lang.Integer'), parameter(name: 'wait', type: boolean),], doc: 'Build a job')
    method(name: 'echo', type: 'Object', params: [message: String], doc: 'Print Message')
    method(name: 'emailextrecipients', type: 'Object', params: [recipientProviders: Map], doc: 'Extended Email Recipients')
    method(name: 'error', type: 'Object', params: [message: String], doc: 'Error signal')
    method(name: 'input', type: 'Object', params: [message: String], doc: 'Wait for interactive input')
    method(name: 'input', type: 'Object', namedParams: [parameter(name: 'message', type: String), parameter(name: 'id', type: String), parameter(name: 'ok', type: String), parameter(name: 'parameters', type: Map), parameter(name: 'submitter', type: String), parameter(name: 'submitterParameter', type: String),], doc: 'Wait for interactive input')
    method(name: 'isUnix', type: 'Object', params: [:], doc: 'Checks if running on a Unix-like node')
    method(name: 'library', type: 'Object', params: [identifier: String], doc: 'Load a shared library on the fly')
    method(name: 'library', type: 'Object', namedParams: [parameter(name: 'identifier', type: String), parameter(name: 'retriever', type: Map),], doc: 'Load a shared library on the fly')
    method(name: 'libraryResource', type: 'Object', params: [resource: String], doc: 'Load a resource file from a shared library')
    method(name: 'lock', type: 'Object', params: [resource: String, body: Closure], doc: 'Lock shared resource')
    method(name: 'lock', type: 'Object', params: [body: Closure], namedParams: [parameter(name: 'resource', type: String), parameter(name: 'inversePrecedence', type: boolean), parameter(name: 'label', type: String), parameter(name: 'quantity', type: 'int'),], doc: 'Lock shared resource')
    method(name: 'mail', type: 'Object', namedParams: [parameter(name: 'subject', type: String), parameter(name: 'body', type: String), parameter(name: 'bcc', type: String), parameter(name: 'cc', type: String), parameter(name: 'charset', type: String), parameter(name: 'from', type: String), parameter(name: 'mimeType', type: String), parameter(name: 'replyTo', type: String), parameter(name: 'to', type: String),], doc: 'Mail')
    method(name: 'milestone', type: 'Object', params: [ordinal: 'java.lang.Integer'], doc: 'The milestone step forces all builds to go through in order')
    method(name: 'milestone', type: 'Object', namedParams: [parameter(name: 'ordinal', type: 'java.lang.Integer'), parameter(name: 'label', type: String),], doc: 'The milestone step forces all builds to go through in order')
    method(name: 'node', type: 'Object', params: [label: String, body: Closure], doc: 'Allocate node')
    method(name: 'properties', type: 'Object', params: [properties: Map], doc: 'Set job properties')
    method(name: 'readTrusted', type: 'Object', params: [path: String], doc: 'Read trusted file from SCM')
    method(name: 'resolveScm', type: 'Object', namedParams: [parameter(name: 'source', type: Map), parameter(name: 'targets', type: Map), parameter(name: 'ignoreErrors', type: boolean),], doc: 'Resolves an SCM from an SCM Source and a list of candidate target branch names')
    method(name: 'retry', type: 'Object', params: [count: int, body: Closure], doc: 'Retry the body up to N times')
    method(name: 'sauce', type: 'Object', params: [credentialsId: String, body: Closure], doc: 'Sauce')
    method(name: 'sauceconnect', type: 'Object', params: [body: Closure], doc: 'Sauce Connect')
    method(name: 'sauceconnect', type: 'Object', params: [body: Closure], namedParams: [parameter(name: 'options', type: String), parameter(name: 'sauceConnectPath', type: String), parameter(name: 'useGeneratedTunnelIdentifier', type: 'java.lang.Boolean'), parameter(name: 'verboseLogging', type: 'java.lang.Boolean'),], doc: 'Sauce Connect')
    method(name: 'script', type: 'Object', params: [body: Closure], doc: 'Run arbitrary Pipeline script')
    method(name: 'sleep', type: 'Object', params: [time: 'int'], doc: 'Sleep')
    method(name: 'sleep', type: 'Object', namedParams: [parameter(name: 'time', type: 'int'), parameter(name: 'unit', type: 'java.util.concurrent.TimeUnit'),], doc: 'Sleep')
    method(name: 'stage', type: 'Object', params: [name: String, body: Closure], doc: 'Stage')
    method(name: 'stage', type: 'Object', params: [body: Closure], namedParams: [parameter(name: 'name', type: String), parameter(name: 'concurrency', type: 'java.lang.Integer'),], doc: 'Stage')
    method(name: 'timeout', type: 'Object', params: [time: 'java.lang.Integer', body: Closure], doc: 'Enforce time limit')
    method(name: 'timeout', type: 'Object', params: [body: Closure], namedParams: [parameter(name: 'time', type: 'java.lang.Integer'), parameter(name: 'unit', type: 'java.util.concurrent.TimeUnit'),], doc: 'Enforce time limit')
    method(name: 'tool', type: 'Object', params: [name: String], doc: 'Use a tool from a predefined Tool Installation')
    method(name: 'tool', type: 'Object', namedParams: [parameter(name: 'name', type: String), parameter(name: 'type', type: String),], doc: 'Use a tool from a predefined Tool Installation')
    method(name: 'waitUntil', type: 'Object', params: [body: Closure], doc: 'Wait for condition')
    method(name: 'withEnv', type: 'Object', params: [overrides: List, body: Closure], doc: 'Set environment variables')
    method(name: 'ws', type: 'Object', params: [dir: String, body: Closure], doc: 'Allocate workspace')
    method(name: 'artifactoryPromoteBuild', type: 'Object', namedParams: [parameter(name: 'promotionConfig', type: Map), parameter(name: 'server', type: Map),], doc: 'Promote build')
    method(name: 'catchError', type: 'Object', params: [body:'Closure'], doc: 'Catch error and set build result to failure')
    method(name: 'catchError', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'buildResult', type: 'java.lang.String'), parameter(name: 'catchInterruptions', type: 'boolean'), parameter(name: 'message', type: 'java.lang.String'), parameter(name: 'stageResult', type: 'java.lang.String'), ], doc: 'Catch error and set build result to failure')
    method(name: 'collectEnv', type: 'Object', params: [env: Map], doc: 'Advanced/Deprecated Collect environment variables and system properties')
    method(name: 'dockerFingerprintRun', type: 'Object', params: [containerId: String], doc: 'Advanced/Deprecated Record trace of a Docker image run in a container')
    method(name: 'dockerFingerprintRun', type: 'Object', namedParams: [parameter(name: 'containerId', type: String), parameter(name: 'toolName', type: String),], doc: 'Record trace of a Docker image run in a container')
    method(name: 'envVarsForTool', type: 'Object', namedParams: [parameter(name: 'toolId', type: String), parameter(name: 'toolVersion', type: String),], doc: 'Fetches the environment variables for a given tool in a list of \'FOO=bar\' strings suitable for the withEnv step.')
    method(name: 'getArtifactoryServer', type: 'Object', params: [artifactoryServerID: String], doc: 'Advanced/Deprecated Get Artifactory server from Jenkins config')
    method(name: 'getContext', type: 'Object', params: [type: Map], doc: 'Advanced/Deprecated Get contextual object from internal APIs')
    method(name: 'newBuildInfo', type: 'Object', params: [:], doc: 'Advanced/Deprecated New buildInfo')
    method(name: 'newGradleBuild', type: 'Object', params: [:], doc: 'Advanced/Deprecated New Artifactory gradle executor')
    method(name: 'newMavenBuild', type: 'Object', params: [:], doc: 'Advanced/Deprecated New Artifactory maven')
    method(name: 'podTemplate', type: 'Object', params: [body: Closure], namedParams: [parameter(name: 'label', type: String), parameter(name: 'name', type: String), parameter(name: 'cloud', type: String), parameter(name: 'containers', type: Map), parameter(name: 'inheritFrom', type: String), parameter(name: 'instanceCap', type: 'int'), parameter(name: 'nodeSelector', type: String), parameter(name: 'serviceAccount', type: String), parameter(name: 'volumes', type: Map), parameter(name: 'workingDir', type: String),], doc: 'Define a podTemplate to use in the kubernetes plugin')
    method(name: 'withContext', type: 'Object', params: [context: Object, body: Closure], doc: 'Advanced/Deprecated Use contextual object from internal APIs within a block')
    method(name: 'xrayScanBuild', type: 'Object', namedParams: [parameter(name: 'xrayScanConfig', type: Map), parameter(name: 'server', type: Map),], doc: 'Xray build scanning')
    property(name: 'openshift', type: 'com.openshift.jenkins.plugins.pipeline.OpenShiftGlobalVariable')
    property(name: 'docker', type: 'org.jenkinsci.plugins.docker.workflow.DockerDSL')
    property(name: 'pipeline', type: 'org.jenkinsci.plugins.pipeline.modeldefinition.ModelStepLoader')
    property(name: 'env', type: 'org.jenkinsci.plugins.workflow.cps.EnvActionImpl.Binder')
    property(name: 'params', type: 'org.jenkinsci.plugins.workflow.cps.ParamsVariable')
    property(name: 'currentBuild', type: 'org.jenkinsci.plugins.workflow.cps.RunWrapperBinder')
    property(name: 'scm', type: 'org.jenkinsci.plugins.workflow.multibranch.SCMVar')
    property(name: 'Artifactory', type: 'org.jfrog.hudson.pipeline.dsl.ArtifactoryDSL')
    property(name: 'cleanPreNonProdAppFromOse', type: 'org.jenkinsci.plugins.workflow.cps.global.UserDefinedGlobalVariable')
    property(name: 'cleanPreNonProdAppFromOseNoCreds', type: 'org.jenkinsci.plugins.workflow.cps.global.UserDefinedGlobalVariable')
    property(name: 'dtrDeleteCurrentBuildImageTag', type: 'org.jenkinsci.plugins.workflow.cps.global.UserDefinedGlobalVariable')
    property(name: 'dtrDeleteOldImageTags', type: 'org.jenkinsci.plugins.workflow.cps.global.UserDefinedGlobalVariable')
    property(name: 'getOseServiceRoute', type: 'org.jenkinsci.plugins.workflow.cps.global.UserDefinedGlobalVariable')
    property(name: 'oseDeleteOldReplicationControllers', type: 'org.jenkinsci.plugins.workflow.cps.global.UserDefinedGlobalVariable')
    property(name: 'setupJavaMavenOseDockerBuildEnvironment', type: 'org.jenkinsci.plugins.workflow.cps.global.UserDefinedGlobalVariable')
    property(name: 'updatePath', type: 'org.jenkinsci.plugins.workflow.cps.global.UserDefinedGlobalVariable')
    property(name: 'verifyApplicationIsInitialized', type: 'org.jenkinsci.plugins.workflow.cps.global.UserDefinedGlobalVariable')
    property(name: 'verifyApplicationIsInitializedNoCreds', type: 'org.jenkinsci.plugins.workflow.cps.global.UserDefinedGlobalVariable')
}
//Steps that require a node context
def closures = context(scope: closureScope(null))
contributor(closures) {
    // What thinpollgs can be inside a node or pipeline
    if (enclosingCall('node') || enclosingCall("pipeline")) {
        method(name: '_OcAction', type: 'Object', namedParams: [parameter(name: 'server', type: String), parameter(name: 'project', type: String), parameter(name: 'verb', type: String), parameter(name: 'verbArgs', type: 'java.util.List'), parameter(name: 'userArgs', type: 'java.util.List'), parameter(name: 'options', type: 'java.util.List'), parameter(name: 'verboseOptions', type: 'java.util.List'), parameter(name: 'token', type: String), parameter(name: 'streamStdOutToConsolePrefix', type: String), parameter(name: 'reference', type: Map), parameter(name: 'logLevel', type: 'int'),], doc: 'Internal utility function for OpenShift DSL')
        method(name: '_OcContextInit', type: 'Object', params: [:], doc: 'Advanced/Deprecated Internal utility function for OpenShift DSL')
        method(name: '_OcWatch', type: 'Object', params: [body: Closure], namedParams: [parameter(name: 'server', type: String), parameter(name: 'project', type: String), parameter(name: 'verb', type: String), parameter(name: 'verbArgs', type: 'java.util.List'), parameter(name: 'userArgs', type: 'java.util.List'), parameter(name: 'options', type: 'java.util.List'), parameter(name: 'verboseOptions', type: 'java.util.List'), parameter(name: 'token', type: String), parameter(name: 'logLevel', type: 'int'),], doc: 'Internal utility function for OpenShift DSL')
        method(name: 'agent', type: 'Object', params: [body: Closure], doc: 'Label expression to select agents')
        method(name: 'archive', type: 'Object', namedParams: [parameter(name: 'includes', type: String), parameter(name: 'excludes', type: String),], doc: 'Archive artifacts')
        method(name: 'archive', type: 'Object', params: [includes: String], doc: 'Advanced/Deprecated Archive artifacts')
        method(name: 'artifactoryDownload', type: 'Object', namedParams: [parameter(name: 'spec', type: String), parameter(name: 'buildInfo', type: Map), parameter(name: 'server', type: Map),], doc: 'Download artifacts')
        method(name: 'ArtifactoryGradleBuild', type: 'Object', namedParams: [parameter(name: 'gradleBuild', type: Map), parameter(name: 'tool', type: String), parameter(name: 'rootDir', type: String), parameter(name: 'buildFile', type: String), parameter(name: 'tasks', type: String), parameter(name: 'switches', type: String), parameter(name: 'useWrapper', type: boolean), parameter(name: 'buildInfo', type: Map), parameter(name: 'usesPlugin', type: boolean),], doc: 'run Artifactory gradle')
        method(name: 'ArtifactoryMavenBuild', type: 'Object', namedParams: [parameter(name: 'mavenBuild', type: Map), parameter(name: 'tool', type: String), parameter(name: 'pom', type: String), parameter(name: 'goals', type: String), parameter(name: 'opts', type: String), parameter(name: 'buildInfo', type: Map),], doc: 'run Artifactory maven')
        method(name: 'artifactoryUpload', type: 'Object', namedParams: [parameter(name: 'spec', type: String), parameter(name: 'buildInfo', type: Map), parameter(name: 'server', type: Map),], doc: 'Upload artifacts')
        method(name: 'bat', type: 'Object', namedParams: [parameter(name: 'script', type: String), parameter(name: 'encoding', type: String), parameter(name: 'returnStatus', type: boolean), parameter(name: 'returnStdout', type: boolean),], doc: 'Windows Batch Script')
        method(name: 'build', type: 'Object', namedParams: [parameter(name: 'job', type: String), parameter(name: 'parameters', type: Map), parameter(name: 'propagate', type: boolean), parameter(name: 'quietPeriod', type: 'java.lang.Integer'), parameter(name: 'wait', type: boolean),], doc: 'Build a job')
        method(name: 'catchError', type: 'Object', params: [body: Closure], doc: 'Advanced/Deprecated Catch error and set build result')
        method(name: 'checkout', type: 'Object', namedParams: [parameter(name: 'scm', type: Map), parameter(name: 'changelog', type: boolean), parameter(name: 'poll', type: boolean),], doc: 'General SCM')
        method(name: 'container', type: 'Object', params: [body: Closure], namedParams: [parameter(name: 'name', type: String), parameter(name: 'cloud', type: String),], doc: 'Run build steps in a container')
        method(name: 'deleteDir', type: 'Object', params: [:], doc: 'Recursively delete the current directory from the workspace')
        method(name: 'dir', type: 'Object', params: [path: String, body: Closure], doc: 'Change current directory')
        method(name: 'dockerFingerprintFrom', type: 'Object', namedParams: [parameter(name: 'dockerfile', type: String), parameter(name: 'image', type: String), parameter(name: 'toolName', type: String),], doc: 'Record trace of a Docker image used in FROM')
        method(name: 'dockerFingerprintRun', type: 'Object', params: [containerId: String], doc: 'Advanced/Deprecated Record trace of a Docker image run in a container')
        method(name: 'dockerPullStep', type: 'Object', namedParams: [parameter(name: 'image', type: String), parameter(name: 'credentialsConfig', type: Map), parameter(name: 'host', type: String), parameter(name: 'buildInfo', type: Map),], doc: 'Artifactory docker pull')
        method(name: 'dockerPushStep', type: 'Object', namedParams: [parameter(name: 'image', type: String), parameter(name: 'credentialsConfig', type: Map), parameter(name: 'host', type: String), parameter(name: 'targetRepo', type: String), parameter(name: 'buildInfo', type: Map),], doc: 'Artifactory docker push')
        method(name: 'ec2', type: 'Object', namedParams: [parameter(name: 'cloud', type: String), parameter(name: 'template', type: String),], doc: 'Cloud template provisioning')
        method(name: 'echo', type: 'Object', params: [message: String], doc: 'Print Message')
        method(name: 'emailext', type: 'Object', namedParams: [parameter(name: 'subject', type: String), parameter(name: 'body', type: String), parameter(name: 'attachLog', type: boolean), parameter(name: 'attachmentsPattern', type: String), parameter(name: 'compressLog', type: boolean), parameter(name: 'mimeType', type: String), parameter(name: 'recipientProviders', type: Map), parameter(name: 'replyTo', type: String), parameter(name: 'to', type: String),], doc: 'Extended Email')
        method(name: 'environment', type: 'Object', params: [body: Closure])
        method(name: 'envVarsForTool', type: 'Object', namedParams: [parameter(name: 'toolId', type: String), parameter(name: 'toolVersion', type: String),], doc: 'Fetches the environment variables for a given tool in a list of \'FOO=bar\' strings suitable for the withEnv step.')
        method(name: 'error', type: 'Object', params: [message: String], doc: 'Error signal')
        method(name: 'fileExists', type: 'Object', params: [file: String], doc: 'Verify if file exists in workspace')
        method(name: 'findFiles', type: 'Object', namedParams: [parameter(name: 'glob', type: String),], doc: 'Find files in the workspace')
        method(name: 'getContext', type: 'Object', params: [type: Map], doc: 'Advanced/Deprecated Get contextual object from internal APIs')
        method(name: 'git', type: 'Object', namedParams: [parameter(name: 'url', type: String), parameter(name: 'branch', type: String), parameter(name: 'changelog', type: boolean), parameter(name: 'credentialsId', type: String), parameter(name: 'poll', type: boolean),], doc: 'Git')
        method(name: 'input', type: 'Object', namedParams: [parameter(name: 'message', type: String), parameter(name: 'id', type: String), parameter(name: 'ok', type: String), parameter(name: 'parameters', type: Map), parameter(name: 'submitter', type: String), parameter(name: 'submitterParameter', type: String),], doc: 'Wait for interactive input')
        method(name: 'isUnix', type: 'Object', params: [:], doc: 'Checks if running on a Unix-like node')
        method(name: 'jiraAddComment', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'comment', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'input', type: 'java.lang.Object'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Add Comment')
        method(name: 'jiraAddWatcher', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'userName', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Add Watcher')
        method(name: 'jiraAssignIssue', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'userName', type: 'java.lang.String'), parameter(name: 'accountId', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Assign Issue')
        method(name: 'jiraAssignableUserSearch', type: 'Object', namedParams: [parameter(name: 'project', type: 'java.lang.String'), parameter(name: 'issueKey', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'maxResults', type: 'int'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'queryStr', type: 'java.lang.String'), parameter(name: 'site', type: 'java.lang.String'), parameter(name: 'startAt', type: 'int'), ], doc: 'JIRA Steps: Searches assignable JIRA Users by username, name or email address for the given project/issueKey')
        method(name: 'jiraComment', type: 'Object', namedParams: [parameter(name: 'issueKey', type: 'java.lang.String'), parameter(name: 'body', type: 'java.lang.String'), ], doc: 'Jira: Add a comment to issue(s)')
        method(name: 'jiraDeleteAttachment', type: 'Object', params: [id:'java.lang.String'], doc: 'JIRA Steps: Delete Attachment')
        method(name: 'jiraDeleteAttachment', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Delete Attachment')
        method(name: 'jiraDeleteIssueLink', type: 'Object', params: [id:'java.lang.String'], doc: 'JIRA Steps: Delete IssueLink')
        method(name: 'jiraDeleteIssueLink', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Delete IssueLink')
        method(name: 'jiraDeleteIssueRemoteLink', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'linkId', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Delete Issue\'s Remote Link by linkId.')
        method(name: 'jiraDeleteIssueRemoteLinks', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'globalId', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Delete Issue\'s Remote Links by globalId.')
        method(name: 'jiraDownloadAttachment', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'override', type: 'boolean'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Download a file to workspace (directory is optional)')
        method(name: 'jiraEditComment', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'commentId', type: 'java.lang.String'), parameter(name: 'comment', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'input', type: 'java.lang.Object'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Edit Issue Comment')
        method(name: 'jiraEditComponent', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'component', type: 'java.lang.Object'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Edit Component')
        method(name: 'jiraEditIssue', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'issue', type: 'java.lang.Object'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Edit Issue')
        method(name: 'jiraEditVersion', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'version', type: 'java.lang.Object'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Edit Version')
        method(name: 'jiraGetAttachmentInfo', type: 'Object', params: [id:'java.lang.String'], doc: 'JIRA Steps: Get Attachment Info')
        method(name: 'jiraGetAttachmentInfo', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Attachment Info')
        method(name: 'jiraGetComment', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'commentId', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Issue Comment')
        method(name: 'jiraGetComments', type: 'Object', params: [idOrKey:'java.lang.String'], doc: 'JIRA Steps: Get Issue Comments')
        method(name: 'jiraGetComments', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Issue Comments')
        method(name: 'jiraGetComponent', type: 'Object', params: [id:'java.lang.String'], doc: 'JIRA Steps: Get Component')
        method(name: 'jiraGetComponent', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Component')
        method(name: 'jiraGetComponentIssueCount', type: 'Object', params: [id:'java.lang.String'], doc: 'JIRA Steps: Get Component Issue Count')
        method(name: 'jiraGetComponentIssueCount', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Component Issue Count')
        method(name: 'jiraGetFields', type: 'Object', params: [:], doc: 'JIRA Steps: Get Fields')
        method(name: 'jiraGetFields', type: 'Object', namedParams: [parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Fields')
        method(name: 'jiraGetIssue', type: 'Object', params: [idOrKey:'java.lang.String'], doc: 'JIRA Steps: Get Issue')
        method(name: 'jiraGetIssue', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Issue')
        method(name: 'jiraGetIssueLink', type: 'Object', params: [id:'java.lang.String'], doc: 'JIRA Steps: Get IssueLink')
        method(name: 'jiraGetIssueLink', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get IssueLink')
        method(name: 'jiraGetIssueLinkTypes', type: 'Object', params: [:], doc: 'JIRA Steps: Get Issue Link Types')
        method(name: 'jiraGetIssueLinkTypes', type: 'Object', namedParams: [parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Issue Link Types')
        method(name: 'jiraGetIssueRemoteLink', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'linkId', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Issue\'s Remote Link by linkId.')
        method(name: 'jiraGetIssueRemoteLinks', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'globalId', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Issue\'s Remote Links by globalId.')
        method(name: 'jiraGetIssueTransitions', type: 'Object', params: [idOrKey:'java.lang.String'], doc: 'JIRA Steps: Get Issue Transitions')
        method(name: 'jiraGetIssueTransitions', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Issue Transitions')
        method(name: 'jiraGetIssueWatches', type: 'Object', params: [idOrKey:'java.lang.String'], doc: 'JIRA Steps: Get Issue Watches')
        method(name: 'jiraGetIssueWatches', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Issue Watches')
        method(name: 'jiraGetProject', type: 'Object', params: [idOrKey:'java.lang.String'], doc: 'JIRA Steps: Get Project')
        method(name: 'jiraGetProject', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Project')
        method(name: 'jiraGetProjectComponents', type: 'Object', params: [idOrKey:'java.lang.String'], doc: 'JIRA Steps: Get Project Components')
        method(name: 'jiraGetProjectComponents', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Project Components')
        method(name: 'jiraGetProjectStatuses', type: 'Object', params: [idOrKey:'java.lang.String'], doc: 'JIRA Steps: Get Project Statuses')
        method(name: 'jiraGetProjectStatuses', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Project Statuses')
        method(name: 'jiraGetProjectVersions', type: 'Object', params: [idOrKey:'java.lang.String'], doc: 'JIRA Steps: Get Project Versions')
        method(name: 'jiraGetProjectVersions', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Project Versions')
        method(name: 'jiraGetProjects', type: 'Object', params: [:], doc: 'JIRA Steps: Get Projects')
        method(name: 'jiraGetProjects', type: 'Object', namedParams: [parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Projects')
        method(name: 'jiraGetServerInfo', type: 'Object', params: [:], doc: 'JIRA Steps: Get Server Info')
        method(name: 'jiraGetServerInfo', type: 'Object', namedParams: [parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Server Info')
        method(name: 'jiraGetVersion', type: 'Object', params: [id:'java.lang.String'], doc: 'JIRA Steps: Get Version')
        method(name: 'jiraGetVersion', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Version')
        method(name: 'jiraIssueSelector', type: 'Object', params: [:], doc: 'Jira: Issue selector')
        method(name: 'jiraIssueSelector', type: 'Object', namedParams: [parameter(name: 'issueSelector', type: 'Map'), ], doc: 'Jira: Issue selector')
        method(name: 'jiraJqlSearch', type: 'Object', params: [jql:'java.lang.String'], doc: 'JIRA Steps: JQL Search')
        method(name: 'jiraJqlSearch', type: 'Object', namedParams: [parameter(name: 'jql', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'fields', type: 'java.lang.Object'), parameter(name: 'maxResults', type: 'int'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), parameter(name: 'startAt', type: 'int'), ], doc: 'JIRA Steps: JQL Search')
        method(name: 'jiraLinkIssues', type: 'Object', namedParams: [parameter(name: 'type', type: 'java.lang.String'), parameter(name: 'inwardKey', type: 'java.lang.String'), parameter(name: 'outwardKey', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'comment', type: 'java.lang.String'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Link Issues')
        method(name: 'jiraNewComponent', type: 'Object', params: [component:'java.lang.Object'], doc: 'JIRA Steps: Create New Component')
        method(name: 'jiraNewComponent', type: 'Object', namedParams: [parameter(name: 'component', type: 'java.lang.Object'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Create New Component')
        method(name: 'jiraNewIssue', type: 'Object', params: [issue:'Map'], doc: 'JIRA Steps: Create New Issue')
        method(name: 'jiraNewIssue', type: 'Object', namedParams: [parameter(name: 'issue', type: 'Map'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Create New Issue')
        method(name: 'jiraNewIssueRemoteLink', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'remoteLink', type: 'java.lang.Object'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Create new remote link for given issue.')
        method(name: 'jiraNewIssues', type: 'Object', params: [issues:'Map'], doc: 'JIRA Steps: Create New Issues')
        method(name: 'jiraNewIssues', type: 'Object', namedParams: [parameter(name: 'issues', type: 'Map'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Create New Issues')
        method(name: 'jiraNewVersion', type: 'Object', params: [version:'java.lang.Object'], doc: 'JIRA Steps: Create New Version')
        method(name: 'jiraNewVersion', type: 'Object', namedParams: [parameter(name: 'version', type: 'java.lang.Object'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Create New Version')
        method(name: 'jiraNotifyIssue', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'notify', type: 'java.lang.Object'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Notify Issue')
        method(name: 'jiraSearch', type: 'Object', params: [jql:'java.lang.String'], doc: 'Jira: Search issues')
        method(name: 'jiraTransitionIssue', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'input', type: 'java.lang.Object'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Transition Issue')
        method(name: 'jiraUploadAttachment', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Attach a file from workspace to an issue')
        method(name: 'jiraUserSearch', type: 'Object', params: [queryStr:'java.lang.String'], doc: 'JIRA Steps: Search Active JIRA Users by username, name or email address.')
        method(name: 'jiraUserSearch', type: 'Object', namedParams: [parameter(name: 'queryStr', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'maxResults', type: 'int'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), parameter(name: 'startAt', type: 'int'), ], doc: 'JIRA Steps: Search Active JIRA Users by username, name or email address.')
        method(name: 'library', type: 'Object', namedParams: [parameter(name: 'identifier', type: String), parameter(name: 'changelog', type: 'java.lang.Boolean'), parameter(name: 'retriever', type: Map),], doc: 'Load a shared library on the fly')
        method(name: 'libraryResource', type: 'Object', params: [resource: String], doc: 'Load a resource file from a shared library')
        method(name: 'load', type: 'Object', params: [path: String], doc: 'Evaluate a Groovy source file into the Pipeline script')
        method(name: 'mail', type: 'Object', namedParams: [parameter(name: 'subject', type: String), parameter(name: 'body', type: String), parameter(name: 'bcc', type: String), parameter(name: 'cc', type: String), parameter(name: 'charset', type: String), parameter(name: 'from', type: String), parameter(name: 'mimeType', type: String), parameter(name: 'replyTo', type: String), parameter(name: 'to', type: String),], doc: 'Mail')
        method(name: 'MavenDescriptorStep', type: 'Object', namedParams: [parameter(name: 'pomFile', type: String), parameter(name: 'version', type: String), parameter(name: 'versionPerModule', type: Map), parameter(name: 'failOnSnapshot', type: boolean), parameter(name: 'dryRun', type: boolean),], doc: 'Get Artifactory Maven descriptor')
        method(name: 'milestone', type: 'Object', namedParams: [parameter(name: 'ordinal', type: 'java.lang.Integer'), parameter(name: 'label', type: String),], doc: 'The milestone step forces all builds to go through in order')
        method(name: 'newArtifactoryServer', type: 'Object', namedParams: [parameter(name: 'url', type: String), parameter(name: 'username', type: String), parameter(name: 'password', type: String), parameter(name: 'credentialsId', type: String),], doc: 'Returns new Artifactory server')
        method(name: 'node', type: 'Object', params: [label: String, body: Closure], doc: 'Allocate node')
        method(name: 'openshiftBuild', type: 'Object', namedParams: [parameter(name: 'bldCfg', type: String), parameter(name: 'apiURL', type: String), parameter(name: 'authToken', type: String), parameter(name: 'buildName', type: String), parameter(name: 'checkForTriggeredDeployments', type: String), parameter(name: 'commitID', type: String), parameter(name: 'env', type: Map), parameter(name: 'namespace', type: String), parameter(name: 'showBuildLogs', type: String), parameter(name: 'verbose', type: String), parameter(name: 'waitTime', type: String), parameter(name: 'waitUnit', type: String),], doc: 'Trigger OpenShift Build')
        method(name: 'openshiftCreateResource', type: 'Object', namedParams: [parameter(name: 'jsonyaml', type: String), parameter(name: 'apiURL', type: String), parameter(name: 'authToken', type: String), parameter(name: 'namespace', type: String), parameter(name: 'verbose', type: String),], doc: 'Create OpenShift Resource(s)')
        method(name: 'openshiftDeleteResourceByJsonYaml', type: 'Object', namedParams: [parameter(name: 'jsonyaml', type: String), parameter(name: 'apiURL', type: String), parameter(name: 'authToken', type: String), parameter(name: 'namespace', type: String), parameter(name: 'verbose', type: String),], doc: 'Delete OpenShift Resource(s) from JSON/YAML')
        method(name: 'openshiftDeleteResourceByKey', type: 'Object', namedParams: [parameter(name: 'types', type: String), parameter(name: 'keys', type: String), parameter(name: 'apiURL', type: String), parameter(name: 'authToken', type: String), parameter(name: 'namespace', type: String), parameter(name: 'verbose', type: String),], doc: 'Delete OpenShift Resource(s) by Key')
        method(name: 'openshiftDeleteResourceByLabels', type: 'Object', namedParams: [parameter(name: 'types', type: String), parameter(name: 'keys', type: String), parameter(name: 'values', type: String), parameter(name: 'apiURL', type: String), parameter(name: 'authToken', type: String), parameter(name: 'namespace', type: String), parameter(name: 'verbose', type: String),], doc: 'Delete OpenShift Resource(s) using Labels')
        method(name: 'openshiftDeploy', type: 'Object', namedParams: [parameter(name: 'depCfg', type: String), parameter(name: 'apiURL', type: String), parameter(name: 'authToken', type: String), parameter(name: 'namespace', type: String), parameter(name: 'verbose', type: String), parameter(name: 'waitTime', type: String), parameter(name: 'waitUnit', type: String),], doc: 'Trigger OpenShift Deployment')
        method(name: 'openshiftExec', type: 'Object', namedParams: [parameter(name: 'pod', type: String), parameter(name: 'apiURL', type: String), parameter(name: 'arguments', type: Map), parameter(name: 'authToken', type: String), parameter(name: 'command', type: String), parameter(name: 'container', type: String), parameter(name: 'namespace', type: String), parameter(name: 'verbose', type: String), parameter(name: 'waitTime', type: String), parameter(name: 'waitUnit', type: String),], doc: 'OpenShift Exec')
        method(name: 'openshiftExec', type: 'Object', params: [pod: String], doc: 'OpenShift Exec')
        method(name: 'openshiftImageStream', type: 'Object', namedParams: [parameter(name: 'name', type: String), parameter(name: 'tag', type: String), parameter(name: 'namespace', type: String), parameter(name: 'apiURL', type: String), parameter(name: 'authToken', type: String), parameter(name: 'changelog', type: boolean), parameter(name: 'poll', type: boolean), parameter(name: 'verbose', type: String),], doc: 'OpenShift ImageStreams')
        method(name: 'openshiftScale', type: 'Object', namedParams: [parameter(name: 'depCfg', type: String), parameter(name: 'replicaCount', type: String), parameter(name: 'apiURL', type: String), parameter(name: 'authToken', type: String), parameter(name: 'namespace', type: String), parameter(name: 'verbose', type: String), parameter(name: 'verifyReplicaCount', type: String), parameter(name: 'waitTime', type: String), parameter(name: 'waitUnit', type: String),], doc: 'Scale OpenShift Deployment')
        method(name: 'openshiftTag', type: 'Object', namedParams: [parameter(name: 'srcStream', type: String), parameter(name: 'srcTag', type: String), parameter(name: 'destStream', type: String), parameter(name: 'destTag', type: String), parameter(name: 'alias', type: String), parameter(name: 'apiURL', type: String), parameter(name: 'authToken', type: String), parameter(name: 'destinationAuthToken', type: String), parameter(name: 'destinationNamespace', type: String), parameter(name: 'namespace', type: String), parameter(name: 'verbose', type: String),], doc: 'Tag OpenShift Image')
        method(name: 'openshiftVerifyBuild', type: 'Object', namedParams: [parameter(name: 'bldCfg', type: String), parameter(name: 'apiURL', type: String), parameter(name: 'authToken', type: String), parameter(name: 'checkForTriggeredDeployments', type: String), parameter(name: 'namespace', type: String), parameter(name: 'verbose', type: String), parameter(name: 'waitTime', type: String), parameter(name: 'waitUnit', type: String),], doc: 'Verify OpenShift Build')
        method(name: 'openshiftVerifyDeployment', type: 'Object', namedParams: [parameter(name: 'depCfg', type: String), parameter(name: 'apiURL', type: String), parameter(name: 'authToken', type: String), parameter(name: 'namespace', type: String), parameter(name: 'replicaCount', type: String), parameter(name: 'verbose', type: String), parameter(name: 'verifyReplicaCount', type: String), parameter(name: 'waitTime', type: String), parameter(name: 'waitUnit', type: String),], doc: 'Verify OpenShift Deployment')
        method(name: 'openshiftVerifyService', type: 'Object', namedParams: [parameter(name: 'svcName', type: String), parameter(name: 'apiURL', type: String), parameter(name: 'authToken', type: String), parameter(name: 'namespace', type: String), parameter(name: 'retryCount', type: String), parameter(name: 'verbose', type: String),], doc: 'Verify OpenShift Service')
        method(name: 'options', type: 'Object', params: [body: Closure])
        method(name: 'parameters', type: 'Object', params: [body: Closure], doc: 'Job parameters')
        method(name: 'post', type: 'Object', params: [name: String, body: Closure], doc: 'Post build actions')
        method(name: 'properties', type: 'Object', params: [properties: Map], doc: 'Set job properties')
        method(name: 'publishBuildInfo', type: 'Object', namedParams: [parameter(name: 'buildInfo', type: Map), parameter(name: 'server', type: Map),], doc: 'Publish build Info to Artifactory')
        method(name: 'publishHTML', type: 'Object', params: [target: Map], doc: 'Publish HTML reports')
        method(name: 'pwd', type: 'Object', namedParams: [parameter(name: 'tmp', type: boolean),], doc: 'Determine current directory')
        method(name: 'readFile', type: 'Object', namedParams: [parameter(name: 'file', type: String), parameter(name: 'encoding', type: String),], doc: 'Read file from workspace')
        method(name: 'readJSON', type: 'Object', namedParams: [parameter(name: 'file', type: String), parameter(name: 'text', type: String),], doc: 'Read JSON from files in the workspace.')
        method(name: 'readManifest', type: 'Object', namedParams: [parameter(name: 'file', type: String), parameter(name: 'text', type: String),], doc: 'Read a Jar Manifest')
        method(name: 'readMavenPom', type: 'Object', namedParams: [parameter(name: 'file', type: String),], doc: 'Read a maven project file.')
        method(name: 'readProperties', type: 'Object', namedParams: [parameter(name: 'defaults', type: Map), parameter(name: 'file', type: String), parameter(name: 'text', type: String),], doc: 'Read properties from files in the workspace or text.')
        method(name: 'readTrusted', type: 'Object', params: [path: String], doc: 'Read trusted file from SCM')
        method(name: 'readYaml', type: 'Object', namedParams: [parameter(name: 'file', type: String), parameter(name: 'text', type: String),], doc: 'Read yaml from files in the workspace or text.')
        method(name: 'resolveScm', type: 'Object', namedParams: [parameter(name: 'source', type: Map), parameter(name: 'targets', type: Map), parameter(name: 'ignoreErrors', type: boolean),], doc: 'Resolves an SCM from an SCM Source and a list of candidate target branch names')
        method(name: 'retry', type: 'Object', params: [count: int, body: Closure], doc: 'Retry the body up to N times')
        method(name: 'script', type: 'Object', params: [body: Closure], doc: 'Run arbitrary Pipeline script')
        method(name: 'sh', type: 'Object', namedParams: [parameter(name: 'script', type: String), parameter(name: 'encoding', type: String), parameter(name: 'returnStatus', type: boolean), parameter(name: 'returnStdout', type: boolean),], doc: 'Shell Script')
        method(name: 'sleep', type: 'Object', namedParams: [parameter(name: 'time', type: 'int'), parameter(name: 'unit', type: 'java.util.concurrent.TimeUnit'),], doc: 'Sleep')
        method(name: 'sshagent', type: 'Object', params: [credentials: List, body:'Closure'], doc: 'SSH Agent')
        method(name: 'sshagent', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'credentials', type: List), parameter(name: 'ignoreMissing', type: boolean), ], doc: 'SSH Agent')
        method(name: 'stages', type: 'Object', params: [body: Closure], doc: 'Stages')
        method(name: 'stash', type: 'Object', namedParams: [parameter(name: 'name', type: String), parameter(name: 'excludes', type: String), parameter(name: 'includes', type: String), parameter(name: 'useDefaultExcludes', type: boolean),], doc: 'Stash some files to be used later in the build')
        method(name: 'step', type: 'Object', params: [delegate: Map], doc: 'General Build Step')
        method(name: 'svn', type: 'Object', namedParams: [parameter(name: 'url', type: String), parameter(name: 'changelog', type: boolean), parameter(name: 'poll', type: boolean),], doc: 'Subversion')
        method(name: 'timeout', type: 'Object', params: [body: Closure], namedParams: [parameter(name: 'time', type: 'int'), parameter(name: 'unit', type: 'java.util.concurrent.TimeUnit'),], doc: 'Enforce time limit')
        method(name: 'timeout', type: 'Object', params: [time: int, body: Closure], doc: 'Enforce time limit')
        method(name: 'tool', type: 'Object', namedParams: [parameter(name: 'name', type: String), parameter(name: 'type', type: String),], doc: 'Use a tool from a predefined Tool Installation')
        method(name: 'touch', type: 'Object', namedParams: [parameter(name: 'file', type: String), parameter(name: 'timestamp', type: 'java.lang.Long'),], doc: 'Create a file (if not already exist) in the workspace, and set the timestamp')
        method(name: 'triggers', type: 'Object', params: [body: Closure], doc: 'Build triggers')
        method(name: 'unarchive', type: 'Object', namedParams: [parameter(name: 'mapping', type: Map),], doc: 'Copy archived artifacts into the workspace')
        method(name: 'unstash', type: 'Object', params: [name: String], doc: 'Restore files previously stashed')
        method(name: 'unzip', type: 'Object', namedParams: [parameter(name: 'zipFile', type: String), parameter(name: 'charset', type: String), parameter(name: 'dir', type: String), parameter(name: 'glob', type: String), parameter(name: 'read', type: boolean), parameter(name: 'test', type: boolean),], doc: 'Extract Zip file')
        method(name: 'validateDeclarativePipeline', type: 'Object', params: [path: String], doc: 'Validate a file containing a Declarative Pipeline')
        method(name: 'waitUntil', type: 'Object', params: [body: Closure], doc: 'Wait for condition')
        method(name: 'when', type: 'Object', params: [body: Closure])
        method(name: 'withContext', type: 'Object', params: [context: 'Object', body: Closure], doc: 'Advanced/Deprecated Use contextual object from internal APIs within a block')
        method(name: 'withCredentials', type: 'Object', params: [bindings: List, body:'Closure'], doc: 'Bind credentials to variables')
        method(name: 'withDockerContainer', type: 'Object', params: [body: Closure], namedParams: [parameter(name: 'image', type: String), parameter(name: 'args', type: String), parameter(name: 'toolName', type: String),], doc: 'Run build steps inside a Docker container')
        method(name: 'withDockerRegistry', type: 'Object', params: [registry: Map, body: Closure], doc: 'Advanced/Deprecated Sets up Docker registry endpoint')
        method(name: 'withDockerServer', type: 'Object', params: [server: Map, body: Closure], doc: 'Advanced/Deprecated Sets up Docker server endpoint')
        method(name: 'withEnv', type: 'Object', params: [overrides: Map, body: Closure], doc: 'Set environment variables')
        method(name: 'wrap', type: 'Object', params: [delegate: Map, body: Closure], doc: 'General Build Wrapper')
        method(name: 'writeFile', type: 'Object', namedParams: [parameter(name: 'file', type: String), parameter(name: 'text', type: String), parameter(name: 'encoding', type: String),], doc: 'Write file to workspace')
        method(name: 'writeJSON', type: 'Object', namedParams: [parameter(name: 'file', type: String), parameter(name: 'json', type: Map),], doc: 'Write JSON to a file in the workspace.')
        method(name: 'writeMavenPom', type: 'Object', namedParams: [parameter(name: 'model', type: Map), parameter(name: 'file', type: String),], doc: 'Write a maven project file.')
        method(name: 'ws', type: 'Object', params: [dir: String, body: Closure], doc: 'Allocate workspace')
        method(name: 'zip', type: 'Object', namedParams: [parameter(name: 'zipFile', type: String), parameter(name: 'archive', type: boolean), parameter(name: 'dir', type: String), parameter(name: 'glob', type: String),], doc: 'Create Zip file')

        //The only thing inside agent can be label
        if (enclosingCall("agent")) {
            property(name: 'any')
            property(name: 'none')
            method(name: 'label', type: String, params: [expr: String])
            method(name: 'docker', type: String, params: [body: Closure])
            method(name: 'docker', type: String, params: [docker_image: String])
            method(name: 'dockerfile', type: boolean, params: [use_dockerfile: boolean])
            method(name: 'kubernetes', type: String, params: [body: Closure])
        }

        if (enclosingCall("dockerfile")) {
            method(name: 'filename', type: String, params: [expr: String])
            method(name: 'dir', type: String, params: [expr: String])
            method(name: 'label', type: String, params: [label: String])
            method(name: 'registryUrl', type: String, params: [registy: String])
            method(name: 'registryCredentialsId', type: String, params: [credentialId: String])
        }

        if (enclosingCall("docker")) {
            method(name: 'alwaysPull', type: String, params: [expr: boolean])
            method(name: 'image', type: String, params: [image_name: String])
            method(name: 'args', type: String, params: [args: String])
            method(name: 'label', type: String, params: [label: String])
            method(name: 'registryUrl', type: String, params: [registy: String])
            method(name: 'registryCredentialsId', type: String, params: [credentialId: String])
        }

        if (enclosingCall("kubernetes")) {
            method(name: 'label', type: String, params: [expr: String])
            method(name: 'yaml', type: String, params: [expr: String])
        }

        if (enclosingCall("environment")) {
            method(name: 'credentials', type: String, params: [credentialId: String])
        }

        if (enclosingCall("when")) {
            method(name: 'beforeInput', type: String, params: [expr: boolean])
            method(name: 'beforeWhen', type: String, params: [expr: boolean])
            method(name: 'beforeAgent', type: String, params: [expr: boolean])
            method(name: 'expression', type: String, params: [body: Closure])
            method(name: 'allOf', type: String, params: [body: Closure])
            method(name: 'anyOf', type: String, params: [body: Closure])
        }

        if (enclosingCall("triggers")) {
            method(name: 'cron', type: String, params: [expr: String], doc: 'Cron expression can be one of @daily, @hourly, etc')
            method(name: 'upstream', type: 'Object', params: [name: String, build_status: 'Object'])
            method(name: 'pollSCM', type: String, params: [expr: String])
            method(name: 'bitbucketPush')
        }

        // Parameters can only contain
        if (enclosingCall("parameters")) {
            method(name: 'string', type: 'Object', namedParams: [parameter(name: 'name', type: String), parameter(name: 'defaultValue', type: String), parameter(name: 'description', type: String)])
            method(name: 'booleanParam', type: 'Object', namedParams: [parameter(name: 'name', type: String), parameter(name: 'defaultValue', type: 'java.lang.Boolean'), parameter(name: 'description', type: String)])
            method(name: 'choice', type: 'Object', namedParams: [parameter(name: 'choice', type: String), parameter(name: 'defaultValue', type: 'java.lang.Boolean'), parameter(name: 'description', type: String)])
        }

        // Find the options!
        if (enclosingCall("options")) {
            method(name: 'ansiColor', type: String, params: [colorMapName: String])
            method(name: 'lock', type: 'Object', params: [resource: String], doc: 'Lock shared resource')
            method(name: 'lock', type: 'Object', namedParams: [parameter(name: 'resource', type: 'java.lang.String'), parameter(name: 'extra', type: 'java.util.List'), parameter(name: 'inversePrecedence', type: 'boolean'), parameter(name: 'label', type: 'java.lang.String'), parameter(name: 'quantity', type: 'int'), parameter(name: 'skipIfLocked', type: 'boolean'), parameter(name: 'variable', type: 'java.lang.String'), ], doc: 'Lock shared resource')
            method(name: 'skipDefaultCheckout', type: String, params: [expr: boolean])
            method(name: 'timestamps')
            method(name: 'buildDiscarder', type: 'Object', params: [logRotator: Object])
            method(name: 'logRotator', type: 'Object', namedParams: [
                parameter(name: 'artifactDaysToKeepStr', type: String),
                parameter(name: 'artifactNumToKeepStr', type: String),
                parameter(name: 'daysToKeepStr', type: String),
                parameter(name: 'numToKeepStr', type: String),
            ])
            method(name: 'timeout', type: 'Object', namedParams: [parameter(name: 'time', type: 'java.lang.Integer'), parameter(name: 'unit', type: String)])
        }

        // Inside stages can be, stage or stage('Name')
        if (enclosingCall("stages")) {
            method(name: 'parallel', type: Object, params: [body: Closure])
            method(name: 'stage', type: 'Object', params: [name: String, body: Closure], doc: 'Stage')
            method(name: 'stage', type: 'Object', params: [body: Closure], namedParams: [parameter(name: 'name', type: String), parameter(name: 'concurrency', type: 'java.lang.Integer'),], doc: 'Stage')
        }

        // Inside steps only steps
        if (enclosingCall("stage")) {
            method(name: 'agent', type: 'Object', params: [body: Closure], doc: 'Label expression to select agents')
            method(name: 'steps', type: 'Object', params: [body: Closure], doc: 'Steps to execute on stage')
            method(name: 'post', type: 'Object', params: [body: Closure], doc: 'Post actions can be executed on a per-stage basis as well')
        }

        // Only inside steps
        if (enclosingCall("steps") || enclosingCall("always") || enclosingCall("success") ||
            enclosingCall("failure") || enclosingCall("unstable") || enclosingCall("changed")) {
            method(name: 'archiveArtifacts', type: 'Object', namedParams: [parameter(name: 'allowEmptyArchive', type: 'boolean'), parameter(name: 'artifacts', type: String), parameter(name: 'caseSensitive', type: boolean), parameter(name: 'defaultExcludes', type: boolean), parameter(name: 'excludes', type: String), parameter(name: 'fingerprint', type: boolean), parameter(name: 'followSymlinks', type: boolean), parameter(name: 'onlyIfSuccessful', type: boolean)], doc: 'Clean workspace')
            method(name: 'timestamp', type: 'Object', params: [body: Closure], doc: 'Timestamps')
            method(name: 'bat', type: 'Object', params: [script: String], doc: 'Windows Batch Script')
            method(name: 'bat', type: 'Object', namedParams: [parameter(name: 'script', type: String), parameter(name: 'encoding', type: String), parameter(name: 'returnStatus', type: boolean), parameter(name: 'returnStdout', type: boolean),], doc: 'Windows Batch Script')
            method(name: 'checkout', type: 'Object', params: [scm: Map], doc: 'General SCM')
            method(name: 'checkout', type: 'Object', namedParams: [parameter(name: 'scm', type: Map), parameter(name: 'changelog', type: boolean), parameter(name: 'poll', type: boolean),], doc: 'General SCM')
            method(name: 'cleanWs', type: 'Object', namedParams: [parameter(name: 'notFailBuild', type: boolean)], doc: 'Clean workspace')
            method(name: 'deleteDir', type: 'Object', params: [:], doc: 'Recursively delete the current directory from the workspace')
            method(name: 'dir', type: 'Object', params: [path: String, body: Closure], doc: 'Change current directory')
            method(name: 'fileExists', type: 'Object', params: [file: String], doc: 'Verify if file exists in workspace')
            method(name: 'git', type: 'Object', params: [url: String], doc: 'Git')
            method(name: 'git', type: 'Object', namedParams: [parameter(name: 'url', type: String), parameter(name: 'branch', type: String), parameter(name: 'changelog', type: boolean), parameter(name: 'credentialsId', type: String), parameter(name: 'poll', type: boolean),], doc: 'Git')
            method(name: 'junit', type: 'Object', params: [testResults: String], doc: 'Archive JUnit-formatted test results')
            method(name: 'junit', type: 'Object', namedParams: [parameter(name: 'testResults', type: String), parameter(name: 'allowEmptyResults', type: boolean), parameter(name: 'healthScaleFactor', type: 'double'), parameter(name: 'keepLongStdio', type: boolean), parameter(name: 'testDataPublishers', type: Map),], doc: 'Archive JUnit-formatted test results')
            method(name: 'load', type: 'Object', params: [path: String], doc: 'Evaluate a Groovy source file into the Pipeline script')
            method(name: 'powershell', type: 'Object', params: [script: String], doc: 'PowerShell Script')
            method(name: 'powershell', type: 'Object', namedParams: [parameter(name: 'script', type: String), parameter(name: 'encoding', type: String), parameter(name: 'returnStatus', type: boolean), parameter(name: 'returnStdout', type: boolean),], doc: 'PowerShell Script')
            method(name: 'publishHTML', type: 'Object', params: [target: Map], doc: 'Publish HTML reports')
            method(name: 'pwd', type: 'Object', params: [:], doc: 'Determine current directory')
            method(name: 'pwd', type: 'Object', namedParams: [parameter(name: 'tmp', type: boolean),], doc: 'Determine current directory')
            method(name: 'readFile', type: 'Object', params: [file: String], doc: 'Read file from workspace')
            method(name: 'readFile', type: 'Object', namedParams: [parameter(name: 'file', type: String), parameter(name: 'encoding', type: String),], doc: 'Read file from workspace')
            method(name: 'sh', type: 'Object', params: [script: String], doc: 'Shell Script')
            method(name: 'sh', type: 'Object', namedParams: [parameter(name: 'script', type: String), parameter(name: 'encoding', type: String), parameter(name: 'returnStatus', type: boolean), parameter(name: 'returnStdout', type: boolean),], doc: 'Shell Script')
            method(name: 'stash', type: 'Object', params: [name: String], doc: 'Stash some files to be used later in the build')
            method(name: 'stash', type: 'Object', namedParams: [parameter(name: 'name', type: String), parameter(name: 'allowEmpty', type: boolean), parameter(name: 'excludes', type: String), parameter(name: 'includes', type: String), parameter(name: 'useDefaultExcludes', type: boolean),], doc: 'Stash some files to be used later in the build')
            method(name: 'tm', type: 'Object', params: [stringWithMacro: String], doc: 'Expand a string containing macros')
            method(name: 'unstash', type: 'Object', params: [name: String], doc: 'Restore files previously stashed')
            method(name: 'validateDeclarativePipeline', type: 'Object', params: [path: String], doc: 'Validate a file containing a Declarative Pipeline')
            method(name: 'wrap', type: 'Object', params: [delegate: Map, body: Closure], doc: 'General Build Wrapper')
            method(name: 'writeFile', type: 'Object', namedParams: [parameter(name: 'file', type: String), parameter(name: 'text', type: String), parameter(name: 'encoding', type: String),], doc: 'Write file to workspace')
            method(name: 'archive', type: 'Object', params: [includes: String], doc: 'Advanced/Deprecated Archive artifacts')
            method(name: 'archive', type: 'Object', namedParams: [parameter(name: 'includes', type: String), parameter(name: 'excludes', type: String),], doc: 'Archive artifacts')
            method(name: 'dockerFingerprintFrom', type: 'Object', namedParams: [parameter(name: 'dockerfile', type: String), parameter(name: 'image', type: String), parameter(name: 'buildArgs', type: Map), parameter(name: 'toolName', type: String),], doc: 'Record trace of a Docker image used in FROM')
            method(name: 'unarchive', type: 'Object', params: [:], doc: 'Advanced/Deprecated Copy archived artifacts into the workspace')
            method(name: 'unarchive', type: 'Object', namedParams: [parameter(name: 'mapping', type: Map),], doc: 'Copy archived artifacts into the workspace')
            method(name: 'withDockerContainer', type: 'Object', params: [image: String, body: Closure], doc: 'Advanced/Deprecated Run build steps inside a Docker container')
            method(name: 'withDockerContainer', type: 'Object', params: [body: Closure], namedParams: [parameter(name: 'image', type: String), parameter(name: 'args', type: String), parameter(name: 'toolName', type: String),], doc: 'Run build steps inside a Docker container')
            method(name: 'withDockerRegistry', type: 'Object', params: [registry: Map, body: Closure], doc: 'Advanced/Deprecated Sets up Docker registry endpoint')
            method(name: 'withDockerServer', type: 'Object', params: [server: Map, body: Closure], doc: 'Advanced/Deprecated Sets up Docker server endpoint')
            method(name: 'parallel', type: 'Object', params: [body: Map], doc: 'Run task in parallel')

            method(name: 'unzipInfobase', doc: 'Unzip Infobase')
            method(name: 'zipInfobase', doc: 'Zip Infobase')
            method(name: 'printLocation', doc: 'Print current node name')
            method(name: 'jobConfiguration', type: 'ru.pulsar.jenkins.library.configuration.JobConfiguration', params: [path: String], doc: 'Load job configuration')
            method(name: 'jobConfiguration', type: 'ru.pulsar.jenkins.library.configuration.JobConfiguration', params: [:], doc: 'Load job configuration')
            method(name: 'bdd', params: [config: 'ru.pulsar.jenkins.library.configuration.JobConfiguration'], doc: 'Run BDD tests')
            method(name: 'createDir', params: [path: String], doc: 'Create directory')
            method(name: 'createInfobase', params: [config: 'ru.pulsar.jenkins.library.configuration.JobConfiguration'], doc: 'Create infobase')
            method(name: 'designerToEdtFormatTransformation', params: [config: 'ru.pulsar.jenkins.library.configuration.JobConfiguration'], doc: 'Convert sources from Designer to EDT format')
            method(name: 'edtToDesignerFormatTransformation', params: [config: 'ru.pulsar.jenkins.library.configuration.JobConfiguration'], doc: 'Convert sources from EDT to Designer format')
            method(name: 'edtValidate', params: [config: 'ru.pulsar.jenkins.library.configuration.JobConfiguration'], doc: 'Run EDT validation')
            method(name: 'getExtensions', params: [config: 'ru.pulsar.jenkins.library.configuration.JobConfiguration'], doc: 'Build or load extensions')
            method(name: 'initFromFiles', params: [config: 'ru.pulsar.jenkins.library.configuration.JobConfiguration'], doc: 'Initialize infobase from source files')
            method(name: 'initFromStorage', params: [config: 'ru.pulsar.jenkins.library.configuration.JobConfiguration'], doc: 'Initialize infobase from storage')
            method(name: 'initInfobase', params: [config: 'ru.pulsar.jenkins.library.configuration.JobConfiguration'], doc: 'Initialize infobase - run migrations and preparation scripts')
            method(name: 'transform', params: [config: 'ru.pulsar.jenkins.library.configuration.JobConfiguration'], doc: 'Transform results of tests')
            method(name: 'syntaxCheck', params: [config: 'ru.pulsar.jenkins.library.configuration.JobConfiguration'], doc: 'Run syntax check')
            method(name: 'smoke', params: [config: 'ru.pulsar.jenkins.library.configuration.JobConfiguration'], doc: 'Run smoke tests')
            method(name: 'yaxunit', params: [config: 'ru.pulsar.jenkins.library.configuration.JobConfiguration'], doc: 'Run YaXUnit tests')
            method(name: 'sonarScanner', params: [config: 'ru.pulsar.jenkins.library.configuration.JobConfiguration'], doc: 'Run SonarQube analysis')
            method(name: 'saveResults', params: [config: 'ru.pulsar.jenkins.library.configuration.JobConfiguration'], doc: 'Archive and publish build results')
            method(name: 'sendNotifications', params: [config: 'ru.pulsar.jenkins.library.configuration.JobConfiguration'], doc: 'Send notifications about build results')
            method(name: 'loadExtensions', params: [config: 'ru.pulsar.jenkins.library.configuration.JobConfiguration', stageName: String], doc: 'Load extensions into infobase')
        }

        // Post actions!
        if (enclosingCall("post")) {
            method(name: 'always', type: 'Object', params: [body: Closure])
            method(name: 'success', type: 'Object', params: [body: Closure])
            method(name: 'failure', type: 'Object', params: [body: Closure])
            method(name: 'unstable', type: 'Object', params: [body: Closure])
            method(name: 'changed', type: 'Object', params: [body: Closure])
        }

        if (enclosingCall("withCredentials")) {
            method(name: 'string', type: Object, params: [credentialId: String, variable: String])
            method(name: 'string', type: Object, namedParams: [parameter(name: 'credentialId', type: String), parameter(name: 'variable', type: String),], doc: 'Determine current directory')
            method(name: 'file', type: Object, params: [credentialId: String, variable: String])
            method(name: 'file', type: Object, namedParams: [parameter(name: 'credentialId', type: String), parameter(name: 'variable', type: String),], doc: 'Determine current directory')
        }
    }
}

// Define default env vars
def envVars = context(ctype: 'org.jenkinsci.plugins.workflow.cps.EnvActionImpl.Binder')
contributor(envVars) {
    property(name: 'BRANCH_NAME', type: String, doc: 'For a multibranch project, this will be set to the name of the branch being built, for example in case you wish to deploy to production from master but not from feature branches; if corresponding to some kind of change request, the name is generally arbitrary (refer to CHANGE_ID and CHANGE_TARGET).')
    property(name: 'CHANGE_ID', type: String, doc: 'For a multibranch project corresponding to some kind of change request, this will be set to the change ID, such as a pull request number, if supported; else unset.')
    property(name: 'CHANGE_URL', type: 'Strig', doc: 'For a multibranch project corresponding to some kind of change request, this will be set to the change URL, if supported; else unset.')
    property(name: 'CHANGE_TITLE', type: String, doc: 'For a multibranch project corresponding to some kind of change request, this will be set to the title of the change, if supported; else unset.')
    property(name: 'CHANGE_AUTHOR', type: String, doc: 'For a multibranch project corresponding to some kind of change request, this will be set to the username of the author of the proposed change, if supported; else unset.')
    property(name: 'CHANGE_AUTHOR_DISPLAY_NAME', type: String, doc: 'For a multibranch project corresponding to some kind of change request, this will be set to the human name of the author, if supported; else unset.')
    property(name: 'CHANGE_AUTHOR_EMAIL', type: String, doc: 'For a multibranch project corresponding to some kind of change request, this will be set to the email address of the author, if supported; else unset.')
    property(name: 'CHANGE_TARGET', type: String, doc: 'rFo a multibranch project corresponding to some kind of change request, this will be set to the target or base branch to which the change could be merged, if supported; else unset.')
    property(name: 'BUILD_NUMBER', type: String, doc: 'The current build number, such as "153"')
    property(name: 'BUILD_ID', type: String, doc: 'The current build ID, identical to BUILD_NUMBER for builds created in 1.597+, but a YYYY-MM-DD_hh-mm-ss timestamp for older builds')
    property(name: 'BUILD_DISPLAY_NAME', type: String, doc: 'The display name of the current build, which is something like "#153" by default.')
    property(name: 'JOB_NAME', type: String, doc: 'Name of the project of this build, such as "foo" or "foo/bar".')
    property(name: 'JOB_BASE_NAME', type: String, doc: 'Short Name of the project of this build stripping off folder paths, such as "foo" for "bar/foo".')
    property(name: 'BUILD_TAG', type: String, doc: 'String of "jenkins-${JOB_NAME}-${BUILD_NUMBER}". All forward slashes (/) in the JOB_NAME are replaced with dashes (-). Convenient to put into a resource file, a jar file, etc for easier identification.')
    property(name: 'EXECUTOR_NUMBER', type: String, doc: 'The unique number that identifies the current executor (among executors of the same machine) that’s carrying out this build. This is the number you see in the "build executor status", except that the number starts from 0, not 1.')
    property(name: 'NODE_NAME', type: String, doc: 'Name of the agent if the build is on an agent, or "master" if run on master')
    property(name: 'NODE_LABELS', type: String, doc: 'Whitespace-separated list of labels that the node is assigned.')
    property(name: 'WORKSPACE', type: String, doc: 'The absolute path of the directory assigned to the build as a workspace.')
    property(name: 'JENKINS_HOME', type: String, doc: 'The absolute path of the directory assigned on the master node for Jenkins to store data.')
    property(name: 'JENKINS_URL', type: String, doc: 'Full URL of Jenkins, like http://server:port/jenkins/ (note: only available if Jenkins URL set in system configuration)')
    property(name: 'BUILD_URL', type: String, doc: 'Full URL of this build, like http://server:port/jenkins/job/foo/15/ (Jenkins URL must be set)')
    property(name: 'JOB_URL', type: String, doc: 'Full URL of this job, like http://server:port/jenkins/job/foo/ (Jenkins URL must be set)')
    property(name: 'GIT_URL', type: String, doc: 'The URL to use for cloning the repository')
}

// Define all the properties in current builds
def currentBuild = context(ctype: 'org.jenkinsci.plugins.workflow.cps.RunWrapperBinder')
contributor(currentBuild) {
    method(name: 'resultIsBetterOrEqualTo', type: 'Boolean', params: [buildStatus: String], doc: 'Compares the current build result to the provided result string (SUCCESS, UNSTABLE, or FAILURE) and returns true if the current build result is better than or equal to the provided result.')
    method(name: 'resultIsWorseOrEqualTo', type: 'Boolean', params: [buildStatus: String], doc: 'Compares the current build result to the provided result string (SUCCESS, UNSTABLE, or FAILURE) and returns true if the current build result is worse than or equal to the provided result.')
    property(name: 'number', type: 'Integer', doc: 'build number')
    property(name: 'result', type: String, doc: 'typically SUCCESS, UNSTABLE, or FAILURE (may be null for an ongoing build)')
    property(name: 'currentResult', type: String, doc: 'typically SUCCESS, UNSTABLE, or FAILURE (never null)')
    property(name: 'displayName', type: String, doc: 'normally #123 but sometimes set to, e.g., an SCM commit identifier')
    property(name: 'description', type: String, doc: 'additional information about the build')
    property(name: 'id', type: String, doc: 'normally number as a string')
    property(name: 'timeInMillis', type: 'long', doc: 'time since the epoch when the build was scheduled')
    property(name: 'startTimeInMillis', type: 'long', doc: 'time since the epoch when the build started running')
    property(name: 'duration', type: 'long', doc: 'duration of the build in milliseconds')
    property(name: 'durationString', type: String, doc: 'a human-readable representation of the build duration')
    property(name: 'previousBuild', type: 'org.jenkinsci.plugins.workflow.cps.RunWrapperBinder', doc: 'another similar object, or null')
    property(name: 'nextBuild', type: 'org.jenkinsci.plugins.workflow.cps.RunWrapperBinder', doc: 'another similar object, or null')
    property(name: 'absoluteUrl', type: String, doc: 'URL of build index page')
    property(name: 'buildVariables', type: Map, doc: 'for a non-Pipeline downstream build, offers access to a map of defined build variables; for a Pipeline downstream build, any variables set globally on env')
    property(name: 'changeSets', type: String, doc: 'a list of changesets coming from distinct SCM checkouts; each has a kind and is a list of commits; each commit has a commitId, timestamp, msg, author, and affectedFiles each of which has an editType and path; the value will not generally be Serializable so you may only access it inside a method marked @NonCPS')
    property(name: 'rawBuild', type: String, doc: 'a hudson.model.Run with further APIs, only for trusted libraries or administrator-approved scripts outside the sandbox; the value will not be Serializable so you may only access it inside a method marked @NonCPS')
}

// This is a dummy Library annotation for the IntellijIDEA to compile the pipelines code locally
// It is not used in runtime, in the runtime (on the real Jenkins) the Jenkins built-in 'Library' annotation is used
@interface Library {
    String value()
}
